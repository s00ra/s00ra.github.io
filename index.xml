<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>50r4</title>
    <link>https://s00ra.github.io/</link>
    <description>Recent content on 50r4</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</managingEditor>
    <webMaster>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</webMaster>
    <copyright>¬©2023 50r4, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 05 Jul 2023 12:08:37 +0900</lastBuildDate>
    
        <atom:link href="https://s00ra.github.io/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>ICMTC Crypto</title>
        <link>https://s00ra.github.io/ctfs/icmtccrypto/</link>
        <pubDate>Wed, 05 Jul 2023 12:08:37 +0900</pubDate>
        <author>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</author>
        <atom:modified>Wed, 05 Jul 2023 12:08:37 +0900</atom:modified>
        <guid>https://s00ra.github.io/ctfs/icmtccrypto/</guid>
        <description>Twilight We encountered an image that contained some unkown characters. To analyze the cipher, I utilized the Symbols Cipher List on the dcode.fr website. It was determined that the cipher was the Hylian Language.
Decrypting the cipher yielded the following text: REVWALJHEHIDDWNPLAINSWCRWJMESSADE. By making slight adjustments to the text,
1 2 print(&amp;#34;REVWALJHEHIDDWNPLAINSWCRWJMESSADE&amp;#34;.replace(&amp;#34;W&amp;#34;, &amp;#34;E&amp;#34;).replace(&amp;#34;J&amp;#34;, &amp;#34;T&amp;#34;)) # and replace the last D in MESSADE with G Flag: EGCERT{REVEALTHEHIDDENPLAINSECRETMESSAGE} Simple Cipher Challenge 1 2 3 4 5 6 7 8 9 10 11 import os FLAG = open(&amp;#34;flag.</description>
        
        <dc:creator>Ahmed Raof</dc:creator>
        <media:content url="https://s00ra.github.io/images/ctfs/icmtc/logo.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://s00ra.github.io/images/ctfs/icmtc/logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>writeUps</category>
            
          
            
              <category>Crypto</category>
            
          
        
        
          
            
              <category>ctfs</category>
            
          
        
        
          
            
              <category>ICMTC</category>
            
          
        
      </item>
      
      <item>
        <title>ICMTC Reverse</title>
        <link>https://s00ra.github.io/ctfs/icmtcrev/</link>
        <pubDate>Wed, 05 Jul 2023 12:08:37 +0900</pubDate>
        <author>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</author>
        <atom:modified>Wed, 05 Jul 2023 12:08:37 +0900</atom:modified>
        <guid>https://s00ra.github.io/ctfs/icmtcrev/</guid>
        <description>Oriris Let&amp;rsquo;s begin by loading the challenge onto IDA. The program prompts the user for input and passes it to the check_flag() function. If the return value is 1, it displays the message Correct Flag :). Otherwise, it will print Wrong Flag :( message.
Upon examining the check_flag() function, we can observe multiple conditional checks. These conditions can be translated into constraints in the Z3 solver to obtain the flag. Notably, the largest index being checked is user_input[41], indicating that the flag length is 42.</description>
        
        <dc:creator>Ahmed Raof</dc:creator>
        <media:content url="https://s00ra.github.io/images/ctfs/icmtc/logo.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://s00ra.github.io/images/ctfs/icmtc/logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>writeUps</category>
            
          
            
              <category>REV</category>
            
          
            
              <category>dumpulator</category>
            
          
        
        
          
            
              <category>ctfs</category>
            
          
        
        
          
            
              <category>ICMTC</category>
            
          
        
      </item>
      
      <item>
        <title>Tables</title>
        <link>https://s00ra.github.io/gt/tables/</link>
        <pubDate>Tue, 28 Mar 2023 12:08:37 +0900</pubDate>
        <author>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</author>
        <atom:modified>Tue, 28 Mar 2023 12:08:37 +0900</atom:modified>
        <guid>https://s00ra.github.io/gt/tables/</guid>
        <description>Introduction Some source language has a significant impact on the assembly. For example, C++ has several features and constructs that do not exist in C, and these can complicate analysis of the resulting assembly.
Malicious programs written in C++ create challenges for the malware analyst that make it harder to determine the purpose of assembly code. Understanding basic C++ features and how they appear in assembly language is critical to analyzing malware written in C++.</description>
        
        <dc:creator>Ahmed Raof</dc:creator>
        <media:content url="https://s00ra.github.io/images/gt/tables/logo.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://s00ra.github.io/images/gt/tables/logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>writeUps</category>
            
          
            
              <category>Flagyard</category>
            
          
            
              <category>c&#43;&#43;</category>
            
          
            
              <category>General Topics</category>
            
          
        
        
          
            
              <category>gt</category>
            
          
        
        
      </item>
      
      <item>
        <title>HTB Cyber Apocalypse</title>
        <link>https://s00ra.github.io/ctfs/cyberapocalypse/</link>
        <pubDate>Sat, 18 Mar 2023 12:08:37 +0900</pubDate>
        <author>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</author>
        <atom:modified>Sat, 18 Mar 2023 12:08:37 +0900</atom:modified>
        <guid>https://s00ra.github.io/ctfs/cyberapocalypse/</guid>
        <description>Hello and welcome to my reverse engineering and machine learning write-up. This was my first time participating in Cyber Apocalypse 2023 - The Cursed Mission, and it was an incredibly fun experience. I had the pleasure of working with IDEK team, and I&#39;m happy to say that we managed to achieve ü•á **1st** place in the competition.1Ô∏è‚É£ CHALLEGNE NAME: Shattered Tablet
Difficulty: Very easy
Deep in an ancient tomb, you&amp;rsquo;ve discovered a stone tablet with secret information on the locations of other relics.</description>
        
        <dc:creator>Ahmed Raof</dc:creator>
        <media:content url="https://s00ra.github.io/images/ctfs/CyberApocalypse/logo.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://s00ra.github.io/images/ctfs/CyberApocalypse/logo.jpg" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>writeUps</category>
            
          
            
              <category>REV</category>
            
          
            
              <category>angr</category>
            
          
            
              <category>Symbolic Execution</category>
            
          
        
        
          
            
              <category>ctfs</category>
            
          
        
        
          
            
              <category>HTB</category>
            
          
        
      </item>
      
      <item>
        <title>Unpacking VMProtect</title>
        <link>https://s00ra.github.io/malware-reports/vmprotect/</link>
        <pubDate>Wed, 15 Mar 2023 12:08:37 +0900</pubDate>
        <author>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</author>
        <atom:modified>Wed, 15 Mar 2023 12:08:37 +0900</atom:modified>
        <guid>https://s00ra.github.io/malware-reports/vmprotect/</guid>
        <description>Sample: 76840fa18df8764afb51f1aa6da10ff65f1bdfe434dc988917380fa31fbe3a73 Introduction Malware is often packed in a way that makes it difficult to understand the code written by the author. Actors behind the malware take the time to obfuscate it so that it is not easy for someone to quickly identify what it does and how to stop it. Depending on the skill level of the malware authors, they may use pre-existing tools such as UPX, or create their own packer.</description>
        
        <dc:creator>Ahmed Raof</dc:creator>
        <media:content url="https://s00ra.github.io/images/malware/Unpacking_VMProtect/logo.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://s00ra.github.io/images/malware/Unpacking_VMProtect/logo.jpg" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>REV</category>
            
          
            
              <category>Tips &amp; Tricks</category>
            
          
            
              <category>malware analysis</category>
            
          
        
        
          
            
              <category>malware-reports</category>
            
          
        
        
          
            
              <category>VMProtect</category>
            
          
        
      </item>
      
      <item>
        <title>Cyber Talents - R3V3RS3 ME</title>
        <link>https://s00ra.github.io/ctfs/r3v3rs3me/</link>
        <pubDate>Wed, 18 Jan 2023 12:08:37 +0900</pubDate>
        <author>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</author>
        <atom:modified>Wed, 18 Jan 2023 12:08:37 +0900</atom:modified>
        <guid>https://s00ra.github.io/ctfs/r3v3rs3me/</guid>
        <description>‚¨áÔ∏è Challenge Link: R3V3RS3 ME Intro Welcome to my blog, today we will delve into the intricacies of a reverse engineering challenge from Cybertalent, specifically, the challenge known as R3V3RS3 ME. This challenge presents us with a .jar file, and as any reverse engineer would know, the first step in solving this challenge is to decompile the file. To accomplish this, we will use the online decompiler
We will be presented with a Java file upon obtaining the decompilation results.</description>
        
        <dc:creator>Ahmed Raof</dc:creator>
        <media:content url="https://s00ra.github.io/images/ctfs/R3V3RS3_ME/logo.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://s00ra.github.io/images/ctfs/R3V3RS3_ME/logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>writeUps</category>
            
          
            
              <category>REV</category>
            
          
        
        
          
            
              <category>ctfs</category>
            
          
        
        
      </item>
      
      <item>
        <title>S01den&#39;s cube</title>
        <link>https://s00ra.github.io/crackmes/s01dens-cube/</link>
        <pubDate>Tue, 17 Jan 2023 12:08:37 +0900</pubDate>
        <author>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</author>
        <atom:modified>Tue, 17 Jan 2023 12:08:37 +0900</atom:modified>
        <guid>https://s00ra.github.io/crackmes/s01dens-cube/</guid>
        <description>Download link S01den&amp;rsquo;s cube Intro Welcome to my blog! Today, we will be diving into the world of solving a Rubik&#39;s cube, as represented by the crackme. As a huge fan of solving Rubik&#39;s cube, I was immediately drawn to this particular crackme challenge. I own a 3x3 Rubik&#39;s cube and have even been able to solve it in under 50 seconds üòä
Before diving into the reverse engineering process, let&#39;s first take a look at the file we will be working with.</description>
        
        <dc:creator>Ahmed Raof</dc:creator>
        <media:content url="https://s00ra.github.io/images/crackmes/S01dens_cube/main_draft.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://s00ra.github.io/images/crackmes/S01dens_cube/main_draft.jpg" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>crackmes</category>
            
          
            
              <category>Unix/linux</category>
            
          
            
              <category>REV</category>
            
          
        
        
          
            
              <category>crackmes</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>X0rb0y</title>
        <link>https://s00ra.github.io/crackmes/x0rb0y/</link>
        <pubDate>Sun, 15 Jan 2023 12:08:37 +0900</pubDate>
        <author>ahmedraof55555@gmail.com (Ahmed Raof. AKA 50r4.)</author>
        <atom:modified>Sun, 15 Jan 2023 12:08:37 +0900</atom:modified>
        <guid>https://s00ra.github.io/crackmes/x0rb0y/</guid>
        <description>Download link X0rb0y Welcome to my latest adventure! Today, I&amp;rsquo;ll be taking you through the process of solving a crackme challenge that had me stumped for hours. The challenge was a Windows executable, and the goal was simple: find the correct key to unlock the program. But as with all CTF challenges, the solution was anything but simple.
The first thing I did was load the executable into IDA, to take a closer look at the program&amp;rsquo;s inner workings.</description>
        
        <dc:creator>Ahmed Raof</dc:creator>
        <media:content url="https://s00ra.github.io/images/crackmes/X0rb0y/logo.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://s00ra.github.io/images/crackmes/X0rb0y/logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>crackmes</category>
            
          
            
              <category>Windows</category>
            
          
            
              <category>REV</category>
            
          
        
        
          
            
              <category>crackmes</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
